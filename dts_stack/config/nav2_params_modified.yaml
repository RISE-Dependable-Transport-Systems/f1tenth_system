slam_toolbox:
  ros__parameters:

    # Plugin params
    solver_plugin: solver_plugins::CeresSolver
    ceres_linear_solver: SPARSE_NORMAL_CHOLESKY
    ceres_preconditioner: SCHUR_JACOBI
    ceres_trust_strategy: LEVENBERG_MARQUARDT
    ceres_dogleg_type: TRADITIONAL_DOGLEG
    ceres_loss_function: None
    # ROS Parameters
    odom_frame: odom
    map_frame: map
    base_frame: base_link
    scan_topic: /scan_lidar
    mode: localization #localization, mapping
    debug_logging: false
    throttle_scans: 1
    transform_publish_period: 0.033 #if 0 never publishes odometry
    map_update_interval: 1.0
    minimum_travel_distance: 0.01
    minimum_travel_heading: 0.01
    minimum_time_interval: 0.02
    resolution: 0.01
    max_laser_range: 20.0 #for rastering images
    transform_timeout: 0.5
    tf_buffer_duration: 30.
    stack_size_to_use: 40000000 #// program needs a larger stack size to serialize large maps
    enable_interactive_mode: true
    # General Parameters
    use_scan_matching: true
    use_scan_barycenter: true
    scan_buffer_size: 30
    scan_buffer_maximum_scan_distance: 20.0
    link_match_minimum_response_fine: 0.1  
    link_scan_maximum_distance: 1.5
    loop_search_maximum_distance: 3.0
    do_loop_closing: true 
    loop_match_minimum_chain_size: 10           
    loop_match_maximum_variance_coarse: 3.0  
    loop_match_minimum_response_coarse: 0.35    
    loop_match_minimum_response_fine: 0.45
    # Correlation Parameters - Correlation Parameters
    correlation_search_space_dimension: 0.5
    correlation_search_space_resolution: 0.01
    correlation_search_space_smear_deviation: 0.1 
    # Correlation Parameters - Loop Closure Parameters
    loop_search_space_dimension: 8.0
    loop_search_space_resolution: 0.05
    loop_search_space_smear_deviation: 0.03
    # Scan Matcher Parameters
    distance_variance_penalty: 2.5      
    angle_variance_penalty: 3.0    
    fine_search_angle_offset: 0.00349     
    coarse_search_angle_offset: 0.349   
    coarse_angle_resolution: 0.0349        
    minimum_angle_penalty: 0.9
    minimum_distance_penalty: 0.5
    use_response_expansion: true

bt_navigator:
  ros__parameters:
    use_sim_time: true
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    enable_groot_monitoring: true
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    default_bt_xml_filename: "navigate_w_replanning_time.xml" # replaced in launch file, but the field is required!
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: true

controller_server:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 25.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugin: "goal_checker"
    controller_plugins: ["FollowPath"]
    odom_topic: /odom
    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.01
      movement_time_allowance: 20.0
    # Goal checker parameters
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: true
    # Regulated Pure Persuit parameters
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.2
      lookahead_dist: 0.4 # The lookahead distance (m) to use to find the lookahead point when "use_velocity_scaled_lookahead_dist" is false
      min_lookahead_dist: 0.35
      max_lookahead_dist: 0.45
      transform_tolerance: 0.2
      max_allowed_time_to_collision: 4.0 # The time to project a velocity command to check for collisions
      use_cost_regulated_linear_velocity_scaling: true # Whether to use the regulated features for proximity to obstacles. This is recommended to be set to true when not working in constantly high-cost spaces.
      cost_scaling_dist: 0.5  # The minimum distance from an obstacle to trigger the scaling of linear velocity, 
      # if use_cost_regulated_linear_velocity_scaling is enabled. The value set should be smaller or equal to the inflation_radius set 
      # in the inflation layer of costmap, since inflation is used to compute the distance from obstacles
      cost_scaling_gain: 0.1   # A multiplier gain, which should be <= 1.0, used to further scale the speed when an obstacle is within cost_scaling_dist. 
      # Lower value reduces speed more quickly.
      inflation_cost_scaling_factor: 1.0  #The value should be exactly the same for accurately computing distance from obstacles using the inflated cell values      
      regulated_linear_scaling_min_speed: 0.1 # The minimum speed for which the regulated features can send, to ensure process is still achievable even in high cost spaces with high curvature.
      min_approach_linear_velocity: 0.1 # The minimum velocity (m/s) threshold to apply when approaching the goal to ensure progress. Must be > 0.01
      # approach_velocity_scaling_dist: 0.5
      # allow_reversing: false
      # max_robot_pose_search_dist: 1.5 # This is set by default to the maximum costmap extent, so it shouldn't be set manually
      # use_interpolation: true # Set this to false for a potential performance boost, at the expense of smooth control.      
      use_approach_linear_velocity_scaling: true # Whether to scale the linear velocity down on approach to the goal for a smooth stop     
      use_velocity_scaled_lookahead_dist: true  
      use_rotate_to_heading: false # Cant be used for ackermann      
      use_regulated_linear_velocity_scaling: false # Whether to use the regulated features for curvature
      # THE FOLLOWING HAVE NO EFFECT SINCE THEY ARE DISABLED
      lookahead_time: 2.0 # The time (s) to project the velocity by when "use_velocity_scaled_lookahead_dist" is true
      rotate_to_heading_angular_vel: 1.0 # If "use_rotate_to_heading" is true, this is the angular velocity to use.
      rotate_to_heading_min_angle: 0.95 # The difference in the path orientation and the starting robot orientation to trigger a rotate in place, if use_rotate_to_heading is enabled.
      max_angular_accel: 3.2 # Maximum allowable angular acceleration while rotating to heading, if enabled
      goal_dist_tol: 0.25 # XY tolerance from goal to rotate to the goal heading, if use_rotate_to_heading is enabled. This should match or be smaller than the GoalChecker's translational goal tolerance.
      regulated_linear_scaling_min_radius: 0.95 # The turning radius for which the regulation features are triggered. Remember, sharper turns have smaller radii
      
      
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: true

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map 
      robot_base_frame: base_link
      use_sim_time: false
      rolling_window: true
      width: 2
      height: 2
      resolution: 0.01
      robot_radius: 0.25 
      always_send_full_costmap: true
      plugins: ["static_layer", "inflation_layer","obstacle_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.2  
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.05 
        inflate_unknown: false
        inflate_around_unknown: false
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        footprint_clearing_enabled: false
        max_obstacle_height: 2.0
        observation_sources: scan_lidar
        scan_lidar:
          topic: /scan_lidar
          max_obstacle_height: 2.0
          obstacle_max_range: 2.5
          raytrace_max_range: 10.0
          expected_update_rate: 1.0
          clearing: true
          marking: true
          data_type: "LaserScan"
  local_costmap_client:
    ros__parameters:
      use_sim_time: true
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: true

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: false
      robot_radius: 0.25 
      resolution: 0.01
      width: 10
      height: 10
      track_unknown_space: true
      always_send_full_costmap: true
      plugins: ["static_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.2  
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.05 
        inflate_unknown: false
        inflate_around_unknown: false
  global_costmap_client:
    ros__parameters:
      use_sim_time: true
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: true

# Planner for Ackermann vehicle
planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: true
    expected_planner_frequency: 1.0
    GridBased:
      allow_unknown: false              # allow traveling in unknown space
      analytic_expansion_ratio: 2.0     # Planner will attempt to complete an analytic expansions in a frequency proportional to this value and the minimum heuristic.
      angle_quantization_bins: 72       # For SE2 node: Number of angle bins for search, must be 1 for 2D node (no angle search)
      change_penalty: 100.0             # For SE2 node: penalty to apply if motion is changing directions, must be >= 0
      cost_penalty: 1.5                # For SE2 node: penalty to apply to higher cost zones
      downsample_costmap: false         # whether or not to downsample the map
      downsampling_factor: 1            # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      max_iterations: -1                # maximum total iterations to search for before failing
      max_planning_time_ms: 5000.0      # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      minimum_turning_radius: 1.05      # For SE2 node & smoother: minimum turning radius in m of path / vehicle (default 0.20), changed from 0.892
      motion_model_for_search: "REEDS_SHEPP"  # 2D Moore, Von Neumann; SE2 DUBIN, "REEDS_SHEPP"
      non_straight_penalty: 0.0        # For SE2 node: penalty to apply if motion is non-straight, must be => 1
      plugin: "smac_planner/SmacPlanner"
      reverse_penalty: 0.0             # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      smooth_path: true                # Whether to smooth searched path
      tolerance: 0.1                    # tolerance for planning if unable to reach exact pose, in meters, for 2D node   
      smoother:
        smoother:
          w_curve: 1.0                 # weight to minimize curvature of path
          w_dist: 0.0                   # weight to bind path to original as optional replacement for cost weight
          w_smooth: 30000.0             # weight to maximize smoothness of path
          w_cost: 1.5                # weight to steer robot away from collision and cost (changed from: 0.025)
          cost_scaling_factor: 1.0     # this should match the inflation layer's parameter
        # I do not recommend users mess with this unless they're doing production tuning
        optimizer:
          max_time: 0.10                # maximum compute time for smoother
          max_iterations: 500           # max iterations of smoother
          debug_optimizer: false        # print debug info
          gradient_tol: 1.0e-10
          fn_tol: 1.0e-20
          param_tol: 1.0e-15
          advanced:
            min_line_search_step_size: 1.0e-20
            max_num_line_search_step_size_iterations: 50
            line_search_sufficient_function_decrease: 1.0e-20
            max_num_line_search_direction_restarts: 10
            max_line_search_step_expansion: 50

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: true

recoveries_server:
  ros__parameters:
    costmap_topic: /local_costmap/costmap_raw
    footprint_topic: /local_costmap/published_footprint
    cycle_frequency: 20.0
    recovery_plugins: ["back_up", "wait", "spin"]
    spin:
      plugin: "nav2_recoveries/Spin"
    back_up:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: map
    robot_base_frame: base_link
    transform_timeout: 0.2
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: true
